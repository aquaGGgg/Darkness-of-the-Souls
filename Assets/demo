//Program.cs 

/*using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.Security.Claims;
using System.IdentityModel.Tokens.Jwt;

var builder = WebApplication.CreateBuilder(args);

// Конфигурация JWT
var jwtKey = "T7hxQw9JgB3ZzSpMnXvKfA2sDjVtZyUc"; // Заменить на надёжный ключ
var keyBytes = Encoding.ASCII.GetBytes(jwtKey);

// CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

// JWT Аутентификация
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(keyBytes),
        ValidateIssuer = false,
        ValidateAudience = false
    };
});


builder.Services.AddAuthorization();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseSwagger();
app.UseSwaggerUI();
app.UseCors("AllowAll");
app.UseAuthentication();
app.UseAuthorization();

// Регистрация
app.MapPost("/register", (RegisterDTO dto) =>
{
    using var repo = new Repository();
    if (repo.Users.Any(u => u.Username == dto.Username))
        return Results.BadRequest("Пользователь уже существует");

    var user = new User
    {
        Username = dto.Username,
        PasswordHash = BCrypt.Net.BCrypt.HashPassword(dto.Password)
    };
    repo.Users.Add(user);
    repo.SaveChanges();

    return Results.Ok("Пользователь зарегистрирован");
});

// Логин
app.MapPost("/login", (LoginDTO dto) =>
{
    using var repo = new Repository();
    var user = repo.Users.FirstOrDefault(u => u.Username == dto.Username);
    if (user == null || !BCrypt.Net.BCrypt.Verify(dto.Password, user.PasswordHash))
        return Results.Unauthorized();

    var tokenHandler = new JwtSecurityTokenHandler();
    var tokenDescriptor = new SecurityTokenDescriptor
    {
        Subject = new ClaimsIdentity(new[]
        {
            new Claim(ClaimTypes.Name, user.Username)
        }),
        Expires = DateTime.UtcNow.AddHours(1),
        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(keyBytes), SecurityAlgorithms.HmacSha256Signature)
    };
    var token = tokenHandler.CreateToken(tokenDescriptor);
    var tokenString = tokenHandler.WriteToken(token);

    return Results.Ok(new { token = tokenString });
});

// эндпоинт
app.MapGet("/orders", () =>
{
    using var repo = new Repository();
    return repo.ReadAll();
});

app.MapGet("/orders/{id}", (Guid id) =>
{
    using var repo = new Repository();
    return repo.Read(id);
});

app.MapPost("/orders", (CreateOrderDTO dto) =>
{
    using var repo = new Repository();
    Order order = new Order(dto.Device, dto.ProblemType, dto.Description, dto.Client);
    repo.Add(order);
    repo.SaveChanges();
    return Results.Ok();
});

app.MapPut("/orders/{id}", (UpdateOrderDTO dto, Guid id) =>
{
    using var repo = new Repository();
    repo.Update(dto, id);
    repo.SaveChanges();
    return Results.Ok();
});

app.MapGet("/statistics", () =>
{
    using var repo = new Repository();
    var competeCount = repo.GetCompleteCount();
    var averageTime = repo.GetAverageTime();
    var stat = repo.GetStatistics();
    StatisticDTO statistic = new StatisticDTO(competeCount, averageTime, stat);
    return statistic;
});


app.Run();

class Order
{
    public Order(string device, string problemType, string description, string client)
    {
        Id = Guid.NewGuid();
        StartDate = DateTime.Now;
        EndDate = null;
        Device = device;
        ProblemType = problemType;
        Description = description;
        Client = client;
        Status = "в ожидании";
        Worker = "не назначен";
        Comment = "";
    }

    public Guid Id { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string Device { get; set; }
    public string ProblemType { get; set; }
    public string Description { get; set; }
    public string Client { get; set; }

    private string status;
    public string Status
    {
        get => status;
        set
        {
            if (value == "выполнено")
                EndDate = DateTime.Now;
            status = value;
        }
    }
    public string Worker { get; set; }
    public string Comment { get; set; }
}

class User
{
    public Guid Id { get; set; } = Guid.NewGuid();
    public string Username { get; set; }
    public string PasswordHash { get; set; }
}

record RegisterDTO(string Username, string Password);
record LoginDTO(string Username, string Password);
record CreateOrderDTO(string Device, string ProblemType, string Description, string Client);
record UpdateOrderDTO(string Status, string Description, string Worker, string Comment);

class StatisticDTO(int completeCount, double averageTime, Dictionary<string, int> stat)
{
    public int CompleteCount { get; set; } = completeCount;
    public double AverageTime { get; set; } = averageTime;
    public Dictionary<string, int> Stat { get; set; } = stat;
}

class Repository : DbContext
{
    public DbSet<Order> Orders { get; set; }
    public DbSet<User> Users { get; set; }

    public Repository()
    {
        Orders = Set<Order>();
        Users = Set<User>();
        Database.EnsureCreated();
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlite("Data Source=orders.db");
    }

    public void Add(Order order) => Orders.Add(order);
    public Order Read(Guid id) => Orders.Find(id);
    public List<Order> ReadAll() => Orders.ToList();

    public void Update(UpdateOrderDTO dto, Guid id)
    {
        Order order = Read(id);
        if (order == null) return;
        if (dto.Status != order.Status)
            order.Status = dto.Status;
        if (dto.Description != order.Description)
            order.Description = dto.Description;
        if (dto.Worker != order.Worker)
            order.Worker = dto.Worker;
        if (dto.Comment != order.Comment)
            order.Comment = dto.Comment;
    }

    public int GetCompleteCount() => Orders.Count(x => x.Status == "выполнено");

    public double GetAverageTime()
    {
        var completeOrders = Orders.Where(x => x.Status == "выполнено" && x.EndDate != null).ToList();
        if (completeOrders.Count == 0) return 0;
        double totalHours = completeOrders.Sum(o => (o.EndDate.Value - o.StartDate).TotalHours);
        return totalHours / completeOrders.Count;
    }

    public Dictionary<string, int> GetStatistics()
    {
        return Orders
            .GroupBy(o => o.ProblemType)
            .ToDictionary(g => g.Key, g => g.Count());
    }
}*/



//пакеты 
/*dotnet add package BCrypt.Net-Next --version 4.0.3
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.16
dotnet add package Microsoft.EntityFrameworkCore --version 9.0.5
dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 9.0.5
dotnet add package SQLite_helper_raw --version 1.0.5
dotnet add package Swashbuckle.AspNetCore --version 8.1.4
dotnet add package System.IdentityModel.Tokens.Jwt --version 8.12.0*/




//FRONT--------------------------------------------------------------------------------------------------------------

//INDEX.HTML--------------------------------------------------------------------------------------------------------------
/*<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order Management</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    section {
      margin-bottom: 40px;
    }

    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 10px;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }

    th {
      background: #f4f4f4;
    }

    fieldset {
      margin-top: 10px;
      padding: 10px;
    }

    label {
      display: block;
      margin-top: 5px;
    }

    input, select, textarea, button {
      margin-top: 5px;
      padding: 5px;
      width: 100%;
    }

    .stats {
      display: flex;
      gap: 20px;
    }

    .stats div {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background: #fafafa;
    }

    .error {
      color: red;
      margin-top: 10px;
    }
  </style>
</head>
<body>

  <h1>Управление заказами</h1>
  <button onclick="logout()" style="float: right; margin-top: -50px;">Выйти</button>

  <section id="orders-section">
    <h2>Список заказов</h2>
    <button onclick="loadOrders()">Обновить список</button>
    <table id="orders-table">
      <thead>
        <tr>
          <th>Id</th>
          <th>Устройство</th>
          <th>Тип проблемы</th>
          <th>Описание</th>
          <th>Клиент</th>
          <th>Статус</th>
          <th>Исполнитель</th>
          <th>Комментарий</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
    <div id="orders-error" class="error"></div>
  </section>

  <section id="create-section">
    <h2>Создать заказ</h2>
    <fieldset>
      <label>Устройство: <input type="text" id="create-device" /></label>
      <label>Тип проблемы: <input type="text" id="create-problemType" /></label>
      <label>Описание: <textarea id="create-description"></textarea></label>
      <label>Клиент: <input type="text" id="create-client" /></label>
      <button onclick="createOrder()">Создать</button>
    </fieldset>
    <div id="create-error" class="error"></div>
  </section>

  <section id="update-section">
    <h2>Обновить заказ</h2>
    <fieldset>
      <label>Id заказа: <input type="text" id="update-id" /></label>
      <label>
        Статус:
        <select id="update-status">
          <option value="в ожидании">в ожидании</option>
          <option value="выполнено">выполнено</option>
          <option value="в процессе">в процессе</option>
        </select>
      </label>
      <label>Описание: <textarea id="update-description"></textarea></label>
      <label>Исполнитель: <input type="text" id="update-worker" /></label>
      <label>Комментарий: <textarea id="update-comment"></textarea></label>
      <button onclick="updateOrder()">Обновить</button>
    </fieldset>
    <div id="update-error" class="error"></div>
  </section>

  <section id="stats-section">
    <h2>Статистика</h2>
    <button onclick="loadStatistics()">Обновить статистику</button>
    <div class="stats">
      <div>
        <strong>Завершённых заказов:</strong>
        <p id="stat-completeCount">–</p>
      </div>
      <div>
        <strong>Среднее время(часы):</strong>
        <p id="stat-averageTime">–</p>
      </div>
      <div style="flex:2;">
        <strong>Распределение по типам проблем:</strong>
        <ul id="stat-problemDist"></ul>
      </div>
    </div>
    <div id="stat-error" class="error"></div>
  </section>

  <script>
    const apiBase = 'http://localhost:5169';

    const token = localStorage.getItem("token");
    if (!token) {
      window.location.href = "auth.html";
    }

    async function authorizedFetch(url, options = {}) {
      options.headers = {
        ...options.headers,
        'Authorization': 'Bearer ' + token
      };
      const res = await fetch(url, options);
      if (res.status === 401) {
        localStorage.removeItem("token");
        window.location.href = "auth.html";
      }
      return res;
    }

    function logout() {
      localStorage.removeItem("token");
      window.location.href = "auth.html";
    }

    async function loadOrders() {
      try {
        const res = await authorizedFetch(apiBase + '/orders');
        if (!res.ok) throw new Error('Ошибка загрузки заказов');
        const orders = await res.json();
        const tbody = document.querySelector('#orders-table tbody');
        tbody.innerHTML = '';
        const errEl = document.getElementById('orders-error');
        if (errEl) errEl.textContent = '';
        orders.forEach(o => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${o.id}</td>
            <td>${o.device}</td>
            <td>${o.problemType}</td>
            <td>${o.description}</td>
            <td>${o.client}</td>
            <td>${o.status}</td>
            <td>${o.worker}</td>
            <td>${o.comment}</td>
          `;
          tbody.appendChild(tr);
        });
      } catch (err) {
        const errEl = document.getElementById('orders-error');
        if (errEl) errEl.textContent = err.message;
      }
    }

    async function createOrder() {
      try {
        const dto = {
          device: document.getElementById('create-device').value,
          problemType: document.getElementById('create-problemType').value,
          description: document.getElementById('create-description').value,
          client: document.getElementById('create-client').value
        };
        const res = await authorizedFetch(apiBase + '/orders', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(dto)
        });
        if (!res.ok) throw new Error('Не удалось создать заказ');
        alert('Заказ создан');
        const errEl = document.getElementById('create-error');
        if (errEl) errEl.textContent = '';
        loadOrders();
      } catch (err) {
        const errEl = document.getElementById('create-error');
        if (errEl) errEl.textContent = err.message;
      }
    }

    async function updateOrder() {
      try {
        const id = document.getElementById('update-id').value;
        const dto = {
          status: document.getElementById('update-status').value,
          description: document.getElementById('update-description').value,
          worker: document.getElementById('update-worker').value,
          comment: document.getElementById('update-comment').value
        };
        const res = await authorizedFetch(apiBase + '/orders/' + id, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(dto)
        });
        if (!res.ok) throw new Error('Не удалось обновить заказ');
        alert('Заказ обновлён');
        const errEl = document.getElementById('update-error');
        if (errEl) errEl.textContent = '';
        loadOrders();
      } catch (err) {
        const errEl = document.getElementById('update-error');
        if (errEl) errEl.textContent = err.message;
      }
    }

    async function loadStatistics() {
      try {
        const res = await authorizedFetch(apiBase + '/statistics');
        if (!res.ok) throw new Error('Ошибка загрузки статистики');
        const stat = await res.json();
        const completeCountEl = document.getElementById('stat-completeCount');
        if (completeCountEl) completeCountEl.textContent = stat.completeCount;
        const averageTimeEl = document.getElementById('stat-averageTime');
        if (averageTimeEl) averageTimeEl.textContent = stat.averageTime.toFixed(2);
        const ul = document.getElementById('stat-problemDist');
        if (ul) {
          ul.innerHTML = '';
          for (const [type, cnt] of Object.entries(stat.stat)) {
            const li = document.createElement('li');
            li.textContent = `${type}: ${cnt}`;
            ul.appendChild(li);
          }
        }
        const errEl = document.getElementById('stat-error');
        if (errEl) errEl.textContent = '';
      } catch (err) {
        const errEl = document.getElementById('stat-error');
        if (errEl) errEl.textContent = err.message;
      }
    }

    window.addEventListener('DOMContentLoaded', () => {
      loadOrders();
      loadStatistics();
    });
  </script>

</body>
</html>*/



//AUTH.HTML-----------------------------------------------------------------------------------------------------------------------------------------------------------



/*<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>Вход / Регистрация</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 40px;
    }
    input, button {
      display: block;
      margin: 10px 0;
      padding: 8px;
      width: 300px;
    }
    h1 {
      margin-top: 40px;
    }
    p {
      color: red;
    }
  </style>
</head>
<body>
  <h1>Регистрация</h1>
  <input type="text" id="regUsername" placeholder="Имя пользователя" />
  <input type="password" id="regPassword" placeholder="Пароль" />
  <button onclick="register()">Зарегистрироваться</button>
  <p id="regMessage"></p>

  <h1>Вход</h1>
  <input type="text" id="loginUsername" placeholder="Имя пользователя" />
  <input type="password" id="loginPassword" placeholder="Пароль" />
  <button onclick="login()">Войти</button>
  <p id="loginMessage"></p>

  <script>
    const apiUrl = 'http://localhost:5169';

    async function register() {
      const username = document.getElementById("regUsername").value;
      const password = document.getElementById("regPassword").value;

      const res = await fetch(`${apiUrl}/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });

      const msg = await res.text();
      document.getElementById("regMessage").innerText = msg;

      if (res.ok) {
        await login(username, password); // авто-вход после регистрации
      }
    }

    async function login(usernameArg, passwordArg) {
      const username = usernameArg ?? document.getElementById("loginUsername").value;
      const password = passwordArg ?? document.getElementById("loginPassword").value;

      const res = await fetch(`${apiUrl}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
      });

      if (res.ok) {
        const data = await res.json();
        localStorage.setItem("token", data.token);
        window.location.href = "index.html";
      } else {
        document.getElementById("loginMessage").innerText = "Ошибка авторизации";
      }
    }
  </script>
</body>
</html>*/
