## Abstracts file.
Attack.cs

Описание:  
`Attack` — это структура, представляющая параметры атаки, такие как урон, дальность и время восстановления.

Поля:  
- `int attackType` — номер анимации атаки.  
- `int damage` — урон, наносимый атакой.  
- `float cooldown` — время восстановления между атаками.  
- `float range` — дальность действия атаки.

---

## AbstractAttack.cs

Описание:  
Абстрактный класс для управления атаками и анимациями в игре.

Поля:  
- `Animator _animator` — компонент для управления анимацией.  
- `int dmg` — значение урона текущей атаки.

Методы:  
1. `Attack(int attackType, int attakDamage)`  
   Выполняет атаку, задаёт тип атаки и урон.  
   Параметры:  
   - `attackType` — номер анимации.  
   - `attakDamage` — урон от атаки.

2. `GetDmg()`  
   Возвращает урон текущей атаки.

3. `ComboCompliter()`  
   Увеличивает счётчик комбо.

4. `EndCombo()`  
   Сбрасывает счётчик комбо.

5. `ProjectileAttackSupport(int attackType)`  
   Запускает анимацию для атаки дальнего боя.  
   Параметры:  
   - `attackType` — номер анимации.

6. `ResetAttack()`  
   Завершает текущую атаку без сброса комбо.

---

## AbstractHealth.cs

Описание:  
Абстрактный класс для управления здоровьем персонажа.

Поля:  
- `int MaxHp` — максимальное количество здоровья.  
- `int hp` — текущее количество здоровья.  
- `Animator _animator` — компонент для управления анимацией.

Методы:  
1. `TakeHit(int dmg)`  
   Уменьшает здоровье при получении урона. Если здоровье опускается до нуля, запускается анимация смерти.  
   Параметры:  
   - `dmg` — величина урона.

2. `Heal(int heal)`  
   Восстанавливает здоровье персонажа. Максимальное здоровье не превышает `MaxHp`.  
   Параметры:  
   - `heal` — величина восстанавливаемого здоровья.

3. `Dead()`  
   Уничтожает объект при смерти персонажа.


//---------------------------------------------------------------------------------------------------------------------------------------------------


##BossLogic
BossAttack.cs

Описание:  
Скрипт для управления атаками босса.  
**Принцип работы:**  
1. Метод `ExecuteRandomAttack` вызывается при анимации появления босса.  
2. В конце анимаций атаки через триггеры вызывается `RandobmCombo`.

Поля:  
- `Transform player` — ссылка на объект игрока.  
- `Attack[] bossAttacks` — массив атак босса с параметрами (тип атаки, урон, дальность, время восстановления).  
- `float Сooldown` — время между атаками.

Методы:  
1. `Start()`  
   Проверяет наличие ссылки на игрока. Если ссылка не указана, выводит сообщение об ошибке.  
   Запускает атаку через 2 секунды после старта.

2. `Update()`  
   Изменяет направление босса в зависимости от позиции игрока.

3. `ExecuteRandomAttack()`  
   Выполняет случайную атаку из доступных:  
   - Рассчитывает дистанцию до игрока.  
   - Выбирает доступные атаки, соответствующие расстоянию.  
   - Если доступных атак нет, запускает анимацию ожидания или перемещения.  
   - Выбирает случайную атаку из доступных и выполняет её.

4. `RandobmCombo(int ChanceToContinue)`  
   Решает, продолжать ли комбо в зависимости от заданного процента вероятности:  
   - Если вероятность срабатывает, комбо продолжается (`ComboCompliter()`).  
   - Если вероятность не срабатывает, комбо завершается, и начинается новая атака через `Сooldown`.

Примечания:  
- Если ссылка на игрока не указана, скрипт выдаёт предупреждение.  
- Анимация атаки выбирается и запускается с учётом дальности до игрока и случайного выбора из доступных атак.


//---------------------------------------------------------------------------------------------------------------------------------------------------


